{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","questions","questionText","answerOptions","answerText","isCorrect","useState","currentQuestion","setCurrentQuestion","showScore","setShowScore","score","setScore","className","length","map","answerOption","onClick","nextQuestion","handleAnswerOptionClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uKAEe,SAASA,IACpB,IAAMC,EAAY,CACd,CACIC,aAAc,0EACdC,cAAe,CACX,CAAEC,WAAY,SAAUC,WAAW,GACnC,CAAED,WAAY,YAAaC,WAAW,GACtC,CAAED,WAAY,WAAYC,WAAW,GACrC,CAAED,WAAY,SAAUC,WAAW,KAG3C,CACIH,aAAc,oEACdC,cAAe,CACX,CAAEC,WAAY,SAAUC,WAAW,GACnC,CAAED,WAAY,aAAcC,WAAW,GACvC,CAAED,WAAY,OAAQC,WAAW,GACjC,CAAED,WAAY,MAAOC,WAAW,KAGxC,CACIH,aAAc,wDACdC,cAAe,CACX,CAAEC,WAAY,SAAUC,WAAW,GACnC,CAAED,WAAY,OAAQC,WAAW,GACjC,CAAED,WAAY,MAAOC,WAAW,GAChC,CAAED,WAAY,IAAKC,WAAW,KAGtC,CACIH,aAAc,sDACdC,cAAe,CACX,CAAEC,WAAY,SAAUC,WAAW,GACnC,CAAED,WAAY,OAAQC,WAAW,GACjC,CAAED,WAAY,MAAOC,WAAW,GAChC,CAAED,WAAY,aAAcC,WAAW,MAnCzB,EAwCoBC,mBAAS,GAxC7B,mBAwCnBC,EAxCmB,KAwCFC,EAxCE,OAyCQF,oBAAS,GAzCjB,mBAyCnBG,EAzCmB,KAyCRC,EAzCQ,OA0CAJ,mBAAS,GA1CT,mBA0CnBK,EA1CmB,KA0CZC,EA1CY,KAwD1B,OACI,qBAAKC,UAAU,MAAf,SACKJ,EACG,sBAAKI,UAAU,gBAAf,wBACgBF,EADhB,WAC+BV,EAAUa,UAGzC,qCACI,sBAAKD,UAAU,mBAAf,UACI,sBAAKA,UAAU,iBAAf,UACI,6CAAgBN,EAAkB,KADtC,IACiDN,EAAUa,UAE3D,qBAAKD,UAAU,gBAAf,SAAgCZ,EAAUM,GAAiBL,kBAE/D,qBAAKW,UAAU,iBAAf,SACKZ,EAAUM,GAAiBJ,cAAcY,KAAI,SAACC,GAAD,OAC1C,wBAAQC,QAAS,kBA5BT,SAACZ,GACzBA,GACAO,EAASD,EAAQ,GAGrB,IAAMO,EAAeX,EAAkB,EACnCW,EAAejB,EAAUa,OACzBN,EAAmBU,GAEnBR,GAAa,GAmB0BS,CAAwBH,EAAaX,YAA5D,SAAyEW,EAAaZ,uBC1ElH,IAYegB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC/B,EAAD,MAEFgC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.e0bc417b.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nexport default function App() {\n    const questions = [\n        {\n            questionText: 'What is the most used web framework among developers worldwide in 2021?',\n            answerOptions: [\n                { answerText: 'jQuery', isCorrect: false },\n                { answerText: 'LoAngular', isCorrect: false },\n                { answerText: 'React.js', isCorrect: true },\n                { answerText: 'Vue.js', isCorrect: false },\n            ],\n        },\n        {\n            questionText: 'What is the most commonly-used programming language in the world?',\n            answerOptions: [\n                { answerText: 'Python', isCorrect: false },\n                { answerText: 'JavaScript', isCorrect: true },\n                { answerText: 'Java', isCorrect: false },\n                { answerText: 'PHP', isCorrect: false },\n            ],\n        },\n        {\n            questionText: 'What is the most used language for Machine Learning ?',\n            answerOptions: [\n                { answerText: 'Python', isCorrect: true },\n                { answerText: 'Java', isCorrect: false },\n                { answerText: 'PHP', isCorrect: false },\n                { answerText: 'C', isCorrect: false },\n            ],\n        },\n        {\n            questionText: 'What is the most used language for web development?',\n            answerOptions: [\n                { answerText: 'Python', isCorrect: false },\n                { answerText: 'Java', isCorrect: false },\n                { answerText: 'PHP', isCorrect: false },\n                { answerText: 'JavaScript', isCorrect: true },\n            ],\n        },\n    ];\n\n    const [currentQuestion, setCurrentQuestion] = useState(0);\n    const [showScore, setShowScore] = useState(false);\n    const [score, setScore] = useState(0);\n\n    const handleAnswerOptionClick = (isCorrect) => {\n        if (isCorrect) {\n            setScore(score + 1);\n        }\n\n        const nextQuestion = currentQuestion + 1;\n        if (nextQuestion < questions.length) {\n            setCurrentQuestion(nextQuestion);\n        } else {\n            setShowScore(true);\n        }\n    };\n    return (\n        <div className='app'>\n            {showScore ? (\n                <div className='score-section'>\n                    You scored {score} out of {questions.length}\n                </div>\n            ) : (\n                <>\n                    <div className='question-section'>\n                        <div className='question-count'>\n                            <span>Question {currentQuestion + 1}</span>/{questions.length}\n                        </div>\n                        <div className='question-text'>{questions[currentQuestion].questionText}</div>\n                    </div>\n                    <div className='answer-section'>\n                        {questions[currentQuestion].answerOptions.map((answerOption) => (\n                            <button onClick={() => handleAnswerOptionClick(answerOption.isCorrect)}>{answerOption.answerText}</button>\n                        ))}\n                    </div>\n                </>\n            )}\n        </div>\n    );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}